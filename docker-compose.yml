---
version: '2'
volumes:
  kafka_data:
  zookeep_data:
  zookeep_log:
  connect_data:
  postgres_data:
  sql_data:
  grafana:
  postgres_data_2:
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    volumes:
      - zookeep_data:/var/lib/zookeeper/data
      - zookeep_log:/var/lib/zookeeper/log
    # - type:volume
    #   source:zookeep_data
    #   target:/var/lib/zookeeper/data
    # - type:volume
    #   source:zookeep_log
    #   target:/var/lib/zookeeper/log
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.2.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
      - kafka_data:/var/lib/kafka/data
    # - type:volume
    #   source:kafka_data
    #   target:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # connect:
  #   image: cnfldemos/cp-server-connect-datagen:0.6.0-7.2.1
  #   hostname: connect
  #   container_name: connect
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     # CLASSPATH required due to CC-2422
  #     CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.2.1.jar
  #     CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #     CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #     CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.1.0
    container_name: kafka-connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/,/connectors/'
      # If you want to use the Confluent Hub installer to d/l component, but make them available
      # when running this offline, spin up the stack once and then run : 
      #   docker cp kafka-connect:/usr/share/confluent-hub-components ./connectors
      #   mv ./connectors/confluent-hub-components/* ./connectors
      #   rm -rf ./connectors/confluent-hub-components
    volumes:
      - connect_data:/connectors
    # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
    command: 
      - bash 
      - -c 
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt mdrogalis/voluble:0.3.1
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:5.5.3
        # Sticking to 5.5.3 at the moment because of issue with 10.0.1 https://rmoff.net/2021/03/11/kafka-connect-sqlsyntaxerrorexception-blob/text-column-used-in-key-specification-without-a-key-length/
        #
        echo "Downloading JDBC driver"
        cd /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc
        # Find the latest version of this https://dev.mysql.com/downloads/connector/j/
        curl https://cdn.mysql.com/Downloads/Connector-J/mysql-connector-java-8.0.23.tar.gz | tar xz 
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        sleep infinity

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - kafka-connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.2.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - kafka-connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://kafka-connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.2.1
    container_name: ksqldb-cli
    depends_on:
      - broker
      - kafka-connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

#   ksql-datagen:
#     image: confluentinc/ksqldb-examples:7.2.1
#     hostname: ksql-datagen
#     container_name: ksql-datagen
#     depends_on:
#       - ksqldb-server
#       - broker
#       - schema-registry
#       - kafka-connect
#     command: "bash -c 'echo Waiting for Kafka to be ready... && \
#                        cub kafka-ready -b broker:29092 1 40 && \
#                        echo Waiting for Confluent Schema Registry to be ready... && \
#                        cub sr-ready schema-registry 8081 40 && \
#                        echo Waiting a few seconds for topic creation to finish... && \
#                        sleep 11 && \
#                        tail -f /dev/null'"
#     environment:
#       KSQL_CONFIG_DIR: "/etc/ksql"
#       STREAMS_BOOTSTRAP_SERVERS: broker:29092
#       STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
#       STREAMS_SCHEMA_REGISTRY_PORT: 8081

#   rest-proxy:
#     image: confluentinc/cp-kafka-rest:7.2.1
#     depends_on:
#       - broker
#       - schema-registry
#     ports:
#       - 8082:8082
#     hostname: rest-proxy
#     container_name: rest-proxy
#     environment:
#       KAFKA_REST_HOST_NAME: rest-proxy
#       KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
#       KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
#       KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  postgres:
      # *-----------------------------*
      # To connect to the DB: 
      #   docker exec -it postgres bash -c 'psql -U $POSTGRES_USER $POSTGRES_DB'
      # *-----------------------------*
      image: debezium/postgres:12
      container_name: postgres
      environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      volumes:
      - postgres_data:/docker-entrypoint-initdb.d/
      - postgres_data_2:/var/lib/postgresql/data
      ports:
      - "5432:5432"

#   grafana:
#         container_name: grafana
#         image: grafana/grafana:latest
#         restart: unless-stopped
#         depends_on:
#             - postgres
#         ports:
#             - 3000:3000
#         volumes:
#             - grafana:/var/lib/grafana
#         env_file: .gfenv
  # mysql:
  #   # *-----------------------------*
  #   # To connect to the DB: 
  #   #   docker exec -it mysql bash -c 'mysql -u root -p$MYSQL_ROOT_PASSWORD'
  #   # *-----------------------------*
  #   image: mysql:8.0
  #   container_name: mysql
  #   ports:
  #     - 3307:3306
  #   environment:
  #    - MYSQL_ROOT_PASSWORD=Admin123
  #    - MYSQL_USER=connect_user
  #    - MYSQL_PASSWORD=asgard
  #   volumes:
  #    - sql_data:/docker-entrypoint-initdb.d/

#   kafkacat:
#       image: edenhill/kafkacat:1.6.0
#       container_name: kafkacat
#       entrypoint: 
#         - /bin/sh 
#         - -c 
#         - |
#           apk add jq; 
#           while [ 1 -eq 1 ];do sleep 60;done
